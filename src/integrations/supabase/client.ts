
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hioribtoyuxrrxmcmldi.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhpb3JpYnRveXV4cnJ4bWNtbGRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMxNzQwODAsImV4cCI6MjA1ODc1MDA4MH0.oO3Kqc2CbEqIKu4yzrH9YWNGrEipjwS8nCflNxX2YCU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      flowType: 'pkce',
      storage: localStorage,
    },
    global: {
      headers: {
        'Accept-Profile': 'public',
      },
    },
    db: {
      schema: 'public',
    },
  }
);

// Add comprehensive error handling for database schema issues
const checkConnection = async () => {
  try {
    console.log('Checking Supabase database connection...');
    
    // Try a simple query to validate connection with explicit schema
    const { data, error } = await supabase
      .from('profiles')
      .select('id')
      .limit(1);
    
    if (error) {
      console.error('Database connection error:', error.message);
      
      if (error.code === 'PGRST106' || error.message.includes('schema must be one of the following')) {
        console.error('Database schema error detected:', error.message);
        // Store a flag in session storage indicating schema issue
        sessionStorage.setItem('db_schema_error', 'true');
        
        // Check if there's an API schema specified in the error message
        if (error.message.includes('api')) {
          console.log('Detected API schema requirement, updating client configuration');
          // Update global schema for future requests
          supabase.rest.headers.update({ 'Accept-Profile': 'api,public' });
        }
        
        return { connected: false, reason: 'schema_error', error };
      } else {
        return { connected: false, reason: 'connection_error', error };
      }
    } else {
      // Clear any previous schema error flag if connection is successful
      console.log('Database connection successful, clearing schema error flag');
      sessionStorage.removeItem('db_schema_error');
      return { connected: true, data };
    }
  } catch (err) {
    console.error('Error checking database connection:', err);
    return { connected: false, reason: 'exception', error: err };
  }
};

// Run connection check immediately on load and log results
checkConnection().then(result => {
  if (result.connected) {
    console.log('Initial database check: Connection successful');
  } else {
    console.warn(`Initial database check: Connection failed - ${result.reason}`);
    // Add more details about the error for debugging
    if (result.error) {
      console.error('Error details:', result.error);
    }
  }
});

// Configure the redirect URL for authentication
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
    // Set redirect URL for the current origin
    const redirectTo = `${window.location.origin}/verify-email`;
    console.log("Setting redirect URL to:", redirectTo);
    
    // Check connection again after sign in
    checkConnection().then(result => {
      console.log('Post-auth database check result:', result);
    });
  }
});

// Get the current domain for email settings
const currentDomain = window.location.origin;
console.log("Current application domain:", currentDomain);

// Export the checkConnection function to use in other parts of the app
export { checkConnection };
