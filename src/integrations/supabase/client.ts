
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hioribtoyuxrrxmcmldi.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhpb3JpYnRveXV4cnJ4bWNtbGRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMxNzQwODAsImV4cCI6MjA1ODc1MDA4MH0.oO3Kqc2CbEqIKu4yzrH9YWNGrEipjwS8nCflNxX2YCU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      flowType: 'pkce',
      storage: localStorage,
    },
    global: {
      headers: {
        'Accept-Profile': 'public',
      },
    },
    db: {
      schema: 'public',
    },
  }
);

// Add comprehensive error handling for database schema issues
const checkConnection = async () => {
  try {
    console.log('Checking Supabase database connection...');
    
    // Perform more specific table checks to detect schema issues early
    const tables = ['profiles', 'personal_info', 'assets', 'liabilities', 'income', 'expenses', 'business_info'];
    let allTablesOk = true;
    let firstError = null;
    
    // Check personal_info table specifically first (most important for this feature)
    try {
      const { data: personalInfoTest, error: personalInfoError } = await supabase
        .from('personal_info')
        .select('id')
        .limit(1);
        
      if (personalInfoError) {
        console.error('Error checking personal_info table:', personalInfoError);
        allTablesOk = false;
        firstError = firstError || personalInfoError;
        
        if (personalInfoError.code === 'PGRST106' || personalInfoError.message.includes('schema must be one of the following')) {
          console.error('Database schema error detected in personal_info table');
          sessionStorage.setItem('db_schema_error', 'true');
        }
      } else {
        console.log('personal_info table check successful');
      }
    } catch (err) {
      console.error('Exception checking personal_info table:', err);
      allTablesOk = false;
      firstError = firstError || err;
    }
    
    // Check for business_info table
    try {
      const { data: businessInfoTest, error: businessInfoError } = await supabase
        .from('business_info')
        .select('id')
        .limit(1);
        
      if (businessInfoError) {
        console.error('Error checking business_info table:', businessInfoError);
        if (businessInfoError.code === 'PGRST116' || businessInfoError.message.includes('relation "business_info" does not exist')) {
          console.log('Business info table does not exist yet - this is expected for new installations');
          // This is normal for new installations, don't mark as schema error
        } else if (businessInfoError.code === 'PGRST106' || businessInfoError.message.includes('schema must be one of the following')) {
          console.error('Database schema error detected in business_info table');
          sessionStorage.setItem('db_schema_error', 'true');
        }
      } else {
        console.log('business_info table check successful');
      }
    } catch (err) {
      console.error('Exception checking business_info table:', err);
      // Don't fail the whole connection check for business_info table
    }
    
    // Try a simple query to validate connection
    if (allTablesOk) {
      const { data, error } = await supabase.from('profiles').select('id').limit(1);
      
      if (error) {
        if (error.code === 'PGRST106' || error.message.includes('schema must be one of the following')) {
          console.error('Database schema error detected:', error.message);
          // Store a flag in session storage indicating schema issue
          sessionStorage.setItem('db_schema_error', 'true');
          return { connected: false, reason: 'schema_error', error };
        } else {
          console.error('Database connection error:', error.message);
          return { connected: false, reason: 'connection_error', error };
        }
      } else {
        // Clear any previous schema error flag if connection is successful
        console.log('Database connection successful, clearing schema error flag');
        sessionStorage.removeItem('db_schema_error');
        return { connected: true, data };
      }
    } else {
      // Report the first error we encountered
      return { 
        connected: false, 
        reason: 'schema_error', 
        error: firstError,
        message: 'Some tables are missing or have schema issues'
      };
    }
  } catch (err) {
    console.error('Error checking database connection:', err);
    return { connected: false, reason: 'exception', error: err };
  }
};

// Run connection check immediately on load and log results
checkConnection().then(result => {
  if (result.connected) {
    console.log('Initial database check: Connection successful');
  } else {
    console.warn(`Initial database check: Connection failed - ${result.reason}`);
    // Add more details about the error for debugging
    if (result.error) {
      console.error('Error details:', result.error);
    }
  }
});

// Configure the redirect URL for authentication
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
    // Set redirect URL for the current origin
    const redirectTo = `${window.location.origin}/verify-email`;
    console.log("Setting redirect URL to:", redirectTo);
    
    // Check connection again after sign in
    checkConnection().then(result => {
      console.log('Post-auth database check result:', result);
    });
  }
});

// Get the current domain for email settings
const currentDomain = window.location.origin;
console.log("Current application domain:", currentDomain);

// Export the checkConnection function to use in other parts of the app
export { checkConnection };
