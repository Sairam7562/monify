
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hioribtoyuxrrxmcmldi.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhpb3JpYnRveXV4cnJ4bWNtbGRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMxNzQwODAsImV4cCI6MjA1ODc1MDA4MH0.oO3Kqc2CbEqIKu4yzrH9YWNGrEipjwS8nCflNxX2YCU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a lock to prevent multiple simultaneous token refreshes
let isRefreshing = false;
let connectionRetries = 0;
const MAX_CONNECTION_RETRIES = 5;

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: false, // Changed to false to prevent URL token detection loops
      flowType: 'pkce',
      storage: localStorage,
    },
    global: {
      headers: {
        'Accept-Profile': 'public', // Using 'public' schema for API calls
      },
    },
  }
);

// Add comprehensive error handling for database schema issues
const checkConnection = async () => {
  try {
    console.log('Checking Supabase database connection...');
    
    // Try a simple query to validate connection with explicit schema
    const { data, error } = await supabase
      .from('profiles')
      .select('id')
      .limit(1);
    
    if (error) {
      console.error('Database connection error:', error.message);
      connectionRetries++;
      
      if (error.code === 'PGRST106' || error.message.includes('schema must be one of the following')) {
        console.error('Database schema error detected:', error.message);
        // Store a flag in session storage indicating schema issue
        sessionStorage.setItem('db_schema_error', 'true');
        
        // No need to attempt token refresh on schema issues
        return { connected: false, reason: 'schema_error', error };
      } else if (connectionRetries <= MAX_CONNECTION_RETRIES) {
        console.log(`Connection retry ${connectionRetries}/${MAX_CONNECTION_RETRIES}`);
        
        // Try to refresh the session
        const { data: session } = await supabase.auth.getSession();
        if (session?.session) {
          await supabase.auth.refreshSession();
        }
        
        // Wait before retry
        await new Promise(resolve => setTimeout(resolve, 1000));
        return checkConnection(); // Recursive retry
      } else {
        return { connected: false, reason: 'connection_error', error };
      }
    } else {
      // Clear any previous schema error flag if connection is successful
      console.log('Database connection successful, clearing schema error flag');
      sessionStorage.removeItem('db_schema_error');
      connectionRetries = 0;
      return { connected: true, data };
    }
  } catch (err) {
    console.error('Error checking database connection:', err);
    return { connected: false, reason: 'exception', error: err };
  }
};

// Run connection check immediately on load and log results
checkConnection().then(result => {
  if (result.connected) {
    console.log('Initial database check: Connection successful');
  } else {
    console.warn(`Initial database check: Connection failed - ${result.reason}`);
    // Add more details about the error for debugging
    if (result.error) {
      console.error('Error details:', result.error);
    }
  }
});

// Configure the redirect URL for authentication and prevent auth loops
let authChangeCount = 0;
const MAX_AUTH_CHANGES = 10;
const AUTH_CHANGE_TIMEOUT = 5000; // 5 seconds
let lastAuthChange = 0;

supabase.auth.onAuthStateChange((event, session) => {
  const now = Date.now();
  
  // Check if we're in a potential auth loop
  if (now - lastAuthChange < 1000) { // If changes are happening faster than once per second
    authChangeCount++;
    console.warn(`Rapid auth state changes detected: ${authChangeCount}`);
    
    if (authChangeCount > MAX_AUTH_CHANGES) {
      console.error("Auth loop detected, ignoring further auth changes for 5 seconds");
      // Skip processing this auth change to break the loop
      setTimeout(() => {
        authChangeCount = 0; // Reset counter after timeout
      }, AUTH_CHANGE_TIMEOUT);
      return;
    }
  } else {
    // Reset counter if changes aren't happening rapidly
    authChangeCount = 0;
  }
  
  lastAuthChange = now;
  
  // Process the auth event
  console.log(`Auth state change event: ${event}`);
  
  if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
    // Set redirect URL for the current origin
    const redirectTo = `${window.location.origin}/dashboard`;
    console.log("Setting redirect URL to:", redirectTo);
    
    // Reset connection retries on successful authentication
    connectionRetries = 0;
    
    // Check connection again after sign in
    // Use setTimeout to avoid potential recursive loop
    setTimeout(() => {
      checkConnection().then(result => {
        console.log('Post-auth database check result:', result);
      });
    }, 0);
  }
});

// Get the current domain for email settings
const currentDomain = window.location.origin;
console.log("Current application domain:", currentDomain);

// Export the checkConnection function to use in other parts of the app
export { checkConnection };
